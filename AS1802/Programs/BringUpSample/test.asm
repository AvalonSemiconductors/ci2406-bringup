R0 equ 0
R1 equ 1
R2 equ 2
R3 equ 3
R4 equ 4
R5 equ 5
R6 equ 6
R7 equ 7
R8 equ 8
R9 equ 9
R10 equ 10
R11 equ 11
R12 equ 12
R13 equ 13
R14 equ 14
R15 equ 15

; Memory locations
MIN00 equ 6000h
MIN01 equ 6001h
MIN02 equ 6002h
MIN03 equ 6003h
MIN10 equ 6004h
MIN11 equ 6005h
MIN12 equ 6006h
MIN13 equ 6007h
MRES0 equ 6008h
MRES1 equ 6009h
MRES2 equ 600Ah
MRES3 equ 600Bh
MRES4 equ 600Ch
MRES5 equ 600Dh
MRES6 equ 600Eh
MRES7 equ 600Fh

TEMP0 equ 6010h
TEMP1 equ 6011h
TEMP2 equ 6012h
TEMP3 equ 6013h
DIN00 equ 6014h
DIN01 equ 6015h
DIN02 equ 6016h
DIN03 equ 6017h
DIN04 equ 6018h
DIN05 equ 6019h
SQRT_RESULT0 equ 601Ah
SQRT_RESULT1 equ 601Bh
SQRT_RESULT2 equ 601Ch
SQRT_RESULT3 equ 601Dh

IO_PORTA equ 0
IO_UART equ 2

; Register conventions
; R2 always points to UART_WAIT subroutine for fast access
; R9 points to memory-mapped IO locations (R9.1 never needs to be reloaded as a result)
; R0 is the default PC
; R1 is the default SP
; R6 is the standard subroutine PC (for any other routine than SPI_WAIT)
; Leaving R3, R4, R5, R7 and R8 - R15 free
; R3, R4, R5, R7 and R9.1 need to be pushed to stack if used by subroutine
	
	org 0
START:
	NOP
	LDI UART_WAIT&255
	PLO R2
	LDI UART_WAIT>>8
	PHI R2
	LDI 80h
	PHI R9
	LDI IO_PORTA
	PLO R9
	
	ldi 55h
	str R9
	inc R9
	ldi 1
	str R9
	ldi 128
	str R9
	ldi 6
	plo R9
	ldi 255
	str R9
	inc R9
	str R9
	
	; Stack at 0x7FFF
	LDI 7Fh
	PHI R1
	LDI 255
	PLO R1
	SEX R1
	
	; Print Hello Message
	LDI HELLO_TEXT>>8
	PHI R3
	LDI HELLO_TEXT&255
	PLO R3
	LDI 02h
	PLO R9
PRINT_LOOP:
	LDN R3
	INC R3
	BZ PRINT_LOOP_DONE
	STR R9
	SEP R2
	BR PRINT_LOOP
PRINT_LOOP_DONE:

	; For several reasons, we want all subroutines to be defined before the main program code
	; So let’s do that, and branch to the rest of the program here
	LBR TEST_MUL

	; Infinite loop of blinking Q
END:
	LDI 0
	PLO R11
	PHI R11
del_loop:
	LDI 222
inner_del_loop:
	ADI 1
	BNZ inner_del_loop
	NOP
	
	DEC R11
	GHI R11
	BNZ del_loop
	GLO R11
	BNZ del_loop
	
	BQ clr_q
	SEQ
	BR s_q
clr_q:
	REQ
s_q:

	LDI 0
	PLO R9
	LDI 128
	PHI R9
	LDN R9
	XRI 128
	STR R9
	LDI 2
	PLO R9
	LDI 'a'
	STR R9
	
	BR END

	; Wait for UART TX complete subroutine
UART_WAIT:
	NOP
	B4 UART_WAIT
	SEP R0
	BR UART_WAIT

	; Display a string of memory as hex
	; R3 = Pointer to most-significant byte
	; R4.0 = Length of string
PRINT_HEX:
	GLO R9
	STXD
	GLO R0
	STXD
	GHI R0
	STXD
	GHI R4
	STXD
	GLO R5
	STXD
	GHI R5
	STXD
	LDI PRINT_HEX_LOOP&255
	PLO R0
	LDI PRINT_HEX_LOOP>>8
	PHI R0
	SEP R0
	IRX
	LDX
	PHI R5
	IRX
	LDX
	PLO R5
	IRX
	LDX
	PHI R4
	IRX
	LDX
	PHI R0
	IRX
	LDX
	PLO R0
	IRX
	LDX
	PLO R9
	SEP R0
	BR PRINT_HEX
PRINT_HEX_LOOP:
	LDI IO_UART
	PLO R9
	LDN R3
	DEC R3
	PHI R4
	SHR
	SHR
	SHR
	SHR
	ADI HEX_DIGITS&255
	PLO R5
	LDI 0
	ADCI HEX_DIGITS>>8
	PHI R5
	LDN R5
	STR R9
weh0:
	NOP
	B4 weh0
	SEP R2
	GHI R4
	ANI 15
	ADI HEX_DIGITS&255
	PLO R5
	LDI 0
	ADCI HEX_DIGITS>>8
	PHI R5
	LDN R5
	STR R9
weh1:
	NOP
	B4 weh1
	SEP R2
	GLO R4
	SMI 1
	PLO R4
	BNZ PRINT_HEX_LOOP
	SEP R6

MUL_8x32:
	LDI MIN10>>8
	PHI R3
	LDI MIN10&255
	PLO R3
	LDA R3
	PLO R10
	LDA R3
	PHI R10
	LDA R3
	PLO R11
	LDA R3
	PHI R11
	LDI 0
	PHI R8
	SEX R3
MUL_8x32_LOOP:
	GLO R8
	SHR
	PLO R8
	BNF MUL_8x32_NO_CARRY
	LDI MRES3&255
	PLO R3
	GLO R10
	ADD
	STR R3
	INC R3
	GHI R10
	ADC
	STR R3
	INC R3
	GLO R11
	ADC
	STR R3
	INC R3
	GHI R11
	ADC
	STR R3
	INC R3
	GHI R8
	ADC
	STR R3
MUL_8x32_NO_CARRY:
	GLO R10
	SHL
	PLO R10
	GHI R10
	SHLC
	PHI R10
	GLO R11
	SHLC
	PLO R11
	GHI R11
	SHLC
	PHI R11
	GHI R8
	SHLC
	PHI R8
	GLO R8
	LBNZ MUL_8x32_LOOP
	SEX R1
	SEP R6
	LBR MUL_8x32

ZERO_MUL_RES:
	LDI MRES7>>8
	PHI R3
	LDI MRES7&255
	PLO R3
	LDI 0
	SEX R3
	STXD
	STXD
	STXD
	STXD
	STXD
	STXD
	STXD
	STXD
	SEX R1
	LBR ZERO_MUL_RES_DONE

	; R15.0 stores sign of result
MUL_32x32_SIGNED:
	LDI 0
	PLO R15
	LDI MIN03>>8
	PHI R13
	LDI MIN03&255
	PLO R13
	LDA R13
	ANI 128
	LBZ MUL_32x32_NOT_NEG_A
	LDI MIN00>>8
	PHI R12
	LDI MIN00&255
	PLO R12
	LDN R12
	XRI 255
	ADI 1
	STR R12
	INC R12
	LDN R12
	XRI 255
	ADCI 0
	STR R12
	INC R12
	LDN R12
	XRI 255
	ADCI 0
	STR R12
	INC R12
	LDN R12
	XRI 255
	ADCI 0
	STR R12
	LDI 1
	PLO R15
MUL_32x32_NOT_NEG_A:
	INC R13
	INC R13
	INC R13
	LDN R13
	ANI 128
	LBZ MUL_32x32_NOT_NEG_B
	LDI MIN10&255
	PLO R12
	LDI MIN10>>8
	PHI R12
	LDN R12
	XRI 255
	ADI 1
	STR R12
	INC R12
	LDN R12
	XRI 255
	ADCI 0
	STR R12
	INC R12
	LDN R12
	XRI 255
	ADCI 0
	STR R12
	INC R12
	LDN R12
	XRI 255
	ADCI 0
	STR R12
	GLO R15
	XRI 1
	PLO R15
MUL_32x32_NOT_NEG_B:
	
	GLO R15
	LSKP
MUL_32x32_UNSIGNED:
	LDI 0
	PLO R15
	GLO R3
	STXD
	GHI R3
	STXD
	LBR ZERO_MUL_RES
ZERO_MUL_RES_DONE:
	LDI 4
	PHI R15
	LDI MIN00>>8
	PHI R13
	LDI MIN00&255
	PLO R13
	LDI MUL_8x32>>8
	PHI R12
	LDI MUL_8x32&255
	PLO R12
MUL_32x32_LOOP:

	; result >>= 8
	LDI MRES1>>8
	PHI R3
	LDI MRES1&255
	PLO R3
	LDI 7
	PLO R14
MUL_32x32_SHIFT_RES_LOOP:
	LDN R3
	DEC R3
	STR R3
	INC R3
	INC R3
	GLO R14
	SMI 1
	PLO R14
	BNZ MUL_32x32_SHIFT_RES_LOOP
	DEC R3
	LDI 0
	STR R3
	
	LDN R13
	PLO R8
	INC R13
	SEP R12 ; mul 8x32
	
	GHI R15
	SMI 1
	PHI R15
	BNZ MUL_32x32_LOOP
	
	GLO R15
	LBZ MUL_32x32_RES_NOT_NEG
	; Sign of result is negative
	; Negate result
	LDI MRES0>>8
	PHI R3
	LDI MRES0&255
	PLO R3
	LDI 255
	ADI 255
MUL_32x32_NEGATE_RES_LOOP:
	LDN R3
	XRI 255
	ADCI 0
	STR R3
	INC R3
	GLO R3
	XRI (MRES7+1)&255
	BNZ MUL_32x32_NEGATE_RES_LOOP
MUL_32x32_RES_NOT_NEG:
	IRX
	LDX
	PHI R3
	IRX
	LDX
	PLO R3
	SEP R0
	LBR MUL_32x32_UNSIGNED

	; Pointer to LSB of int in R3
PRINTINT32:
	GLO R8
	STXD
	GLO R9
	STXD
	LDA R3
	PLO R10
	LDA R3
	PHI R10
	LDA R3
	PLO R11
	LDN R3
	PHI R11
	DEC R3
	DEC R3
	DEC R3
	LDI 0
	PLO R14
	PLO R8
	LDI PRINTINT32_DIVS>>8
	PHI R15
	LDI PRINTINT32_DIVS&255
	PLO R15
PRINTINT32_LOOP:
	LDI 0
	PHI R14
	SEX R15
	; while(1) {
PRINTINT32_DIV_LOOP:
	LDI 255
	ADI 255
	; {R13, R12} = {R11, R10} - divs[i];
	GLO R10
	ADD
	PLO R12
	IRX
	GHI R10
	ADC
	PHI R12
	IRX
	GLO R11
	ADC
	PLO R13
	GHI R11
	IRX
	ADC
	PHI R13
	DEC R15
	DEC R15
	DEC R15
	; break if {R13, R12} < 0;
	GHI R13
	ANI 128
	LBNZ PRINTINT32_DIV_LOOP_END
	; R14.1++;
	GHI R14
	ADI 1
	PHI R14
	; {R11, R10} = {R13, R12};
	GLO R12
	PLO R10
	GLO R13
	PLO R11
	GHI R13
	PHI R11
	GHI R12
	PHI R10
	; }
	LBR PRINTINT32_DIV_LOOP
PRINTINT32_DIV_LOOP_END:
	SEX R1
	; if(R14.1 != 0 || flag || i == 9) {
	GLO R14
	ADI 0
	BNZ PRINTINT32_DO_PRINT
	GHI R14
	ADI 0
	BNZ PRINTINT32_DO_PRINT
	GLO R8
	XRI 9
	BNZ PRINTINT32_NO_PRINT
PRINTINT32_DO_PRINT:
	; set flag
	LDI 'y'
	PLO R14
	; print '0' + R14.1
	LDI IO_UART
	PLO R9
	GHI R14
	ADI '0'
	STR R9
weh2:
	B4 weh2
PRINTINT32_NO_PRINT:
	; }
	
	INC R15
	INC R15
	INC R15
	INC R15
	GLO R8
	ADI 1
	PLO R8
	XRI 10
	LBNZ PRINTINT32_LOOP
	
	IRX
	LDX
	PLO R9
	IRX
	LDX
	PLO R8
	SEP R0
	LBR PRINTINT32

	; Pointer to LSB of int in R3
PRINTINT64:
	GLO R8
	STXD
	GHI R8
	STXD
	GLO R9
	STXD
	GLO R2
	STXD
	GHI R2
	STXD
	GLO R3
	STXD
	GHI R3
	STXD
	GLO R4
	STXD
	GHI R4
	STXD
	GLO R5
	STXD
	GHI R5
	STXD
	
	LDI 0
	PLO R14
	GLO R8
	LDA R3
	PLO R10
	LDA R3
	PHI R10
	LDA R3
	PLO R11
	LDA R3
	PHI R11
	LDA R3
	PLO R12
	LDA R3
	PHI R12
	LDA R3
	PLO R13
	LDN R3
	PHI R13
	LDI PRINTINT64_DIVS>>8
	PHI R2
	LDI PRINTINT64_DIVS&255
	PLO R2
PRINTINT64_LOOP:
	LDI 0
	PHI R14
	SEX R2
PRINTINT64_DIV_LOOP:
	LDI 255
	ADI 255
	; {R15, R5, R3, R4} = {R13, R12, R11, R10} - divs[i];
	GLO R10
	ADD
	PLO R4
	IRX
	GHI R10
	ADC
	PHI R4
	GLO R11
	IRX
	ADC
	PLO R3
	IRX
	GHI R11
	ADC
	IRX
	PHI R3
	GLO R12
	ADC
	PLO R5
	IRX
	GHI R12
	ADC
	PHI R5
	IRX
	GLO R13
	ADC
	PLO R15
	GHI R13
	IRX
	ADC
	PHI R15
	DEC R2
	DEC R2
	DEC R2
	DEC R2
	DEC R2
	DEC R2
	DEC R2
	; break if {R15, R5, R3, R4} < 0;
	GHI R15
	ANI 128
	BNZ PRINTINT64_DIV_LOOP_END
	; {R13, R12, R11, R10} = {R15, R5, R3, R4}
	GLO R4
	PLO R10
	GHI R4
	PHI R10
	GLO R3
	PLO R11
	GHI R3
	PHI R11
	GLO R5
	PLO R12
	GHI R5
	PHI R12
	GLO R15
	PLO R13
	GHI R15
	PHI R15
	; R14.1++;
	GHI R14
	ADI 1
	PHI R14
	LBR PRINTINT64_DIV_LOOP
PRINTINT64_DIV_LOOP_END:
	SEX R1
	; if(R14.1 != 0 || flag || i == 18) {
	GLO R14
	ADI 0
	BNZ PRINTINT64_DO_PRINT
	GHI R14
	ADI 0
	BNZ PRINTINT64_DO_PRINT
	GLO R8
	XRI 18
	BNZ PRINTINT64_NO_PRINT
PRINTINT64_DO_PRINT:
	; set flag
	LDI 'y'
	PLO R14
	; print '0' + R14.1
	LDI IO_UART
	PLO R9
	GHI R14
	ADI '0'
	STR R9
weh3:
	NOP
	NOP
	B4 weh3
	NOP
PRINTINT64_NO_PRINT:
	; }
	
	GLO R2
	ADI 8
	PLO R2
	GHI R2
	ADCI 0
	PHI R2
	GLO R8
	ADI 1
	PLO R8
	SMI 19
	LBNZ PRINTINT64_LOOP
	
	IRX
	LDX
	PHI R5
	IRX
	LDX
	PLO R5
	IRX
	LDX
	PHI R4
	IRX
	LDX
	PLO R4
	IRX
	LDX
	PHI R3
	IRX
	LDX
	PLO R3
	IRX
	LDX
	PHI R2
	IRX
	LDX
	PLO R2
	IRX
	LDX
	PLO R9
	IRX
	LDX
	PHI R8
	IRX
	LDX
	PLO R8
	SEP R0
	LBR PRINTINT64

	; Pointer to LSB of fixed-point number in R3
PRINT_FIXED:
	GLO R9
	STXD
	GLO R3
	STXD
	GHI R3
	STXD
	
	LDA R3
	PLO R10
	LDA R3
	PHI R10
	LDA R3
	PLO R11
	LDN R3
	PHI R11
	ANI 128
	LBZ PRINT_FIXED_NOT_NEG
	; Print '-'
	LDI UART_WAIT
	PLO R9
	LDI '-'
	STR R9
weh4:
	B4 weh4
	; Negate fixed-point number
	GLO R10
	XRI 255
	ADI 1
	PLO R10
	GHI R10
	XRI 255
	ADCI 0
	PHI R10
	GLO R11
	XRI 255
	ADCI 0
	PLO R11
	GHI R11
	XRI 255
	ADCI 0
	PHI R11
PRINT_FIXED_NOT_NEG:
	; Print integer portion
	LDI TEMP0>>8
	PHI R3
	LDI TEMP0&255
	PLO R3
	GLO R11
	STR R3
	INC R3
	GHI R11
	STR R3
	INC R3
	LDI 0
	STR R3
	INC R3
	STR R3
	DEC R3
	DEC R3
	DEC R3
	; The pain of doing nested subroutine calls on this arch
	GLO R0
	STXD
	GHI R0
	STXD
	LDI PRINT_FIXED_CONT_1>>8
	PHI R0
	LDI PRINT_FIXED_CONT_1&255
	PLO R0
	SEP R0
PRINT_FIXED_CONT_1:
	; Push R10, we won’t care about R11 anymore after this
	GLO R10
	STXD
	GHI R10
	STXD
	LDI PRINTINT32>>8
	PHI R6
	LDI PRINTINT32&255
	PLO R6
	SEP R6
	; Print '.'
	LDI IO_UART
	PLO R9
	LDI '.'
	STR R9
	SEP R2
	IRX
	LDX
	PHI R10
	IRX
	LDX
	PLO R10
	; Print fraction portion
	LDI MIN00>>8
	PHI R3
	LDI MIN00&255
	PLO R3
	LDI 0
	STR R3
	INC R3
	STR R3
	INC R3
	LDI 10
	STR R3
	INC R3
	ANI 0
	STR R3
	LDI MUL_32x32_UNSIGNED>>8
	PHI R6
	LDI MUL_32x32_UNSIGNED&255
	PLO R6
	LDI 6
	PLO R15
PRINT_FIXED_LOOP:
	DEC R15
	GLO R15
	LBZ PRINT_FIXED_LOOP_END
	STXD
	LDI MIN10>>8
	PHI R3
	LDI MIN10&255
	PLO R3
	GLO R10
	STR R3
	INC R3
	GHI R10
	STR R3
	INC R3
	LDI 0
	STR R3
	INC R3
	STR R3
	SEP R6
	LDI MRES2>>8
	PHI R3
	LDI MRES2&255
	PLO R3
	LDA R3
	PLO R10
	LDA R3
	PHI R10
	LDN R3
	ADI '0'
	STR R9
	SEP R2
	
	IRX
	LDX
	PLO R15
	GLO R10
	BNZ PRINT_FIXED_LOOP
	GHI R10
	BNZ PRINT_FIXED_LOOP
PRINT_FIXED_LOOP_END:
	; Return
	LDI PRINT_FIXED_CONT_2>>8
	PHI R6
	LDI PRINT_FIXED_CONT_2&255
	PLO R6
	SEP R6
PRINT_FIXED_CONT_2:
	IRX
	LDX
	PHI R0
	IRX
	LDX
	PLO R0
	IRX
	LDX
	PHI R3
	IRX
	LDX
	PLO R3
	IRX
	LDX
	PLO R9
	SEP R0
	LBR PRINT_FIXED

DIV_48x32_SIGNED:
	LDI 0
	PHI R15
	LDI DIN05>>8
	PHI R13
	LDI DIN05&255
	PLO R13
	LDN R13
	ANI 128
	LBZ DIV_48x32_NO_NEG_A
	LDI DIN00>>8
	PHI R13
	LDI DIN00&255
	PLO R13
	LDN R13
	XRI 255
	ADI 1
	STR R13
	INC R13
	LDN R13
	XRI 255
	ADCI 0
	STR R13
	INC R13
	LDN R13
	XRI 255
	ADCI 0
	STR R13
	INC R13
	LDN R13
	XRI 255
	ADCI 0
	STR R13
	INC R13
	LDN R13
	XRI 255
	ADCI 0
	STR R13
	INC R13
	LDN R13
	XRI 255
	ADCI 0
	STR R13
	LDI 1
	PHI R15
DIV_48x32_NO_NEG_A:
	LDI MIN03>>8
	PHI R13
	LDI MIN03&255
	PLO R13
	LDN R13
	ANI 128
	LBZ DIV_48x32_NO_NEG_B
	LDI MIN03>>8
	PHI R13
	LDI MIN03&255
	PLO R13
	LDN R13
	XRI 255
	ADI 1
	STR R13
	INC R13
	LDN R13
	XRI 255
	ADCI 0
	STR R13
	INC R13
	LDN R13
	XRI 255
	ADCI 0
	STR R13
	INC R13
	LDN R13
	XRI 255
	ADCI 0
	STR R13
	GHI R15
	XRI 1
	PHI R15
DIV_48x32_NO_NEG_B:
	GHI R15
	LSKP
DIV_48x32_UNSIGNED:
	LDI 0
	PHI R15
	LDI MRES5>>8
	PHI R13
	LDI MRES5&255
	PLO R13
	SEX R13
	LDI 0
	STXD
	STXD
	STXD
	STXD
	STXD
	STXD
	SEX R1
	GLO R2
	STXD
	GHI R2
	STXD
	GLO R3
	STXD
	GHI R3
	STXD
	GLO R8
	STXD
	GHI R8
	STXD
	GLO R4
	STXD
	GHI R4
	STXD
	GLO R7
	STXD
	GHI R7
	STXD
	
	; Cache negative of second input
	LDI MIN00>>8
	PHI R13
	LDI MIN00&255
	PLO R13
	LDI MIN10>>8
	PHI R7
	LDI MIN10&255
	PLO R7
	LDA R13
	XRI 255
	ADI 1
	STR R7
	INC R7
	LDA R13
	XRI 255
	ADCI 0
	STR R7
	INC R7
	LDA R13
	XRI 255
	ADCI 0
	STR R7
	INC R7
	LDA R13
	XRI 255
	ADCI 0
	STR R7
	; LShift overflow
	LDI 0
	PLO R13
	PHI R13
	PLO R14
	PHI R14
	PLO R15
	; To store result
	PLO R8
	PHI R8
	PLO R10
	PHI R10
	PLO R11
	PHI R11
	; Loop counter
	LDI 48
	PLO R4
DIV_48x32_LOOP:
	; {R11, R10, R8} <<= 1
	GLO R8
	SHL
	PLO R8
	GHI R8
	SHLC
	PHI R8
	GLO R10
	SHLC
	PLO R10
	GHI R10
	SHLC
	PHI R10
	GLO R11
	SHLC
	PLO R11
	GHI R11
	SHLC
	PHI R11
	; {R15.0, R14, R13, DIN} <<= 1
	LDI DIN00>>8
	PHI R2
	LDI DIN00&255
	PLO R2
	LDN R2
	SHL
	STR R2
	INC R2
	LDN R2
	SHLC
	STR R2
	INC R2
	LDN R2
	SHLC
	STR R2
	INC R2
	LDN R2
	SHLC
	STR R2
	INC R2
	LDN R2
	SHLC
	STR R2
	INC R2
	LDN R2
	SHLC
	STR R2
	GLO R13
	SHLC
	PLO R13
	GHI R13
	SHLC
	PHI R13
	GLO R14
	SHLC
	PLO R14
	GHI R14
	SHLC
	PHI R14
	GLO R15
	SHLC
	PLO R15
	; {R7, R3} = {R15.0, R14, R13} - MIN
	LDI MIN10>>8
	PHI R2
	LDI MIN10&255
	PLO R2
	SEX R2
	GLO R13
	ADD
	IRX
	PLO R3
	GHI R13
	ADC
	IRX
	PHI R3
	GLO R14
	ADC
	IRX
	PLO R7
	GHI R14
	ADC
	PHI R7
	GLO R15
	ADCI 255
	SEX R1
	BNF DIV_48x32_LESS_THAN ; if carry set
	; then
	; R15.0 is only used to potentially overflow a single bit during unsigned divisions
	; it will *always* be clear after the subtraction if the result is positive
	; R15.0 = 0
	; {R14, R13} = {R7, R3}
	LDI 0
	PLO R15
	GLO R3
	PLO R13
	GHI R3
	PHI R13
	GLO R7
	PLO R14
	GHI R7
	PHI R14
	; {R11, R10, R8} |= 1
	GLO R8
	ORI 1
	PLO R8
DIV_48x32_LESS_THAN:
	GLO R4
	SMI 1
	PLO R4
	LBNZ DIV_48x32_LOOP
	LDI MRES0>>8
	PHI R2
	LDI MRES0&255
	PLO R2
	GLO R8
	STR R2
	INC R2
	GHI R8
	STR R2
	INC R2
	GLO R10
	STR R2
	INC R2
	GHI R10
	STR R2
	INC R2
	GLO R11
	STR R2
	INC R2
	GHI R11
	STR R2
	; Technically, there is also a remainder in R14, R13, but I don’t need it right now

	GHI R15
	LBZ DIV_48x32_NO_NEG_RES
	LDI MRES0>>8
	PHI R2
	LDI MRES0&255
	PLO R2
	LDN R2
	XRI 255
	ADI 1
	STR R2
	INC R2
	LDN R2
	XRI 255
	ADCI 0
	STR R2
	INC R2
	LDN R2
	XRI 255
	ADCI 0
	STR R2
	INC R2
	LDN R2
	XRI 255
	ADCI 0
	STR R2
	INC R2
	LDN R2
	XRI 255
	ADCI 0
	STR R2
	INC R2
	LDN R2
	XRI 255
	ADCI 0
	STR R2
DIV_48x32_NO_NEG_RES:
	IRX
	LDX
	PHI R7
	IRX
	LDX
	PLO R7
	IRX
	LDX
	PHI R4
	IRX
	LDX
	PLO R4
	IRX
	LDX
	PHI R8
	IRX
	LDX
	PLO R8
	IRX
	LDX
	PHI R3
	IRX
	LDX
	PLO R3
	IRX
	LDX
	PHI R2
	IRX
	LDX
	PLO R2
	SEP R0

	; Square-root of fixed-point number pointed to by R3 (LSB)
SQRT:
	GLO R3
	STXD
	GHI R3
	STXD
	GLO R9
	STXD
	GHI R9
	STXD

	INC R3
	INC R3
	INC R3
	; Initial guess X / 2
	LDN R3
	DEC R3
	SHR
	PHI R4
	LDN R3
	DEC R3
	SHRC
	PLO R4
	LDN R3
	DEC R3
	SHRC
	PHI R9
	LDN R3
	SHRC
	PLO R9

	GLO R0
	STXD
	GHI R0
	STXD
	LDI SQRT_CONT_1&255
	PLO R0
	LDI SQRT_CONT_1>>8
	PHI R0
	SEP R0

SQRT_CONT_1:
	; 4 iterations
	LDI 4
SQRT_LOOP:
	STXD
	; x_n²
	LDI MIN13>>8
	PHI R14
	LDI MIN13&255
	PLO R14
	SEX R14
	GHI R4
	STXD
	GLO R4
	STXD
	GHI R9
	STXD
	GLO R9
	STXD
	GHI R4
	STXD
	GLO R4
	STXD
	GHI R9
	STXD
	GLO R9
	STXD
	SEX R1
	LDI MUL_32x32_SIGNED>>8
	PHI R6
	LDI MUL_32x32_SIGNED&255
	PLO R6
	SEP R6
	; -x_n²
	LDI MRES2>>8
	PHI R10
	LDI MRES2&255
	PLO R10
	LDN R10
	XRI 255
	ADI 1
	PLO R13
	INC R10
	LDN R10
	XRI 255
	ADCI 0
	PHI R13
	INC R10
	LDN R10
	XRI 255
	ADCI 0
	PLO R14
	INC R10
	LDN R10
	XRI 255
	ADCI 0
	PHI R14
	; S + (-x_n²)
	LDI DIN00>>8
	PHI R10
	LDI DIN00&255
	PLO R10
	LDI 0
	STR R10
	INC R10
	STR R10
	INC R10
	SEX R3
	GLO R13
	ADD
	STR R10
	INC R10
	INC R3
	GHI R13
	ADC
	STR R10
	INC R10
	INC R3
	GLO R14
	ADC
	STR R10
	INC R10
	INC R3
	GHI R14
	ADC
	STR R10
	INC R10
	DEC R3
	DEC R3
	DEC R3
	SEX R1
	; 2x_n
	LDI MIN00>>8
	PHI R10
	LDI MIN00&255
	PLO R10
	GLO R9
	SHL
	STR R10
	INC R10
	GHI R9
	SHLC
	STR R10
	INC R10
	GLO R4
	SHLC
	STR R10
	INC R10
	GHI R4
	SHLC
	STR R10
	INC R10
	; a_n =  [S + (-x_n²)] / [2x_n]
	LDI DIV_48x32_SIGNED>>8
	PHI R6
	LDI DIV_48x32_SIGNED&255
	PLO R6
	SEP R6
	; x_n + a_n
	LDI MRES0>>8
	PHI R10
	LDI MRES0&255
	PLO R10
	LDI SQRT_RESULT0>>8
	PHI R11
	LDI SQRT_RESULT0&255
	PLO R11
	SEX R10
	GLO R9
	ADD
	STR R11
	LDX
	PLO R7
	IRX
	INC R11
	GHI R9
	ADC
	STR R11
	LDX
	PHI R7
	IRX
	INC R11
	GLO R4
	ADC
	STR R11
	LDX
	PLO R14
	IRX
	INC R11
	GHI R4
	ADC
	STR R11
	LDX
	PHI R14
	SEX R1
	; a_n²
	LDI MIN13>>8
	PHI R12
	LDI MIN13&255
	PLO R12
	SEX R12
	GHI R14
	STXD
	GLO R14
	STXD
	GHI R7
	STXD
	GLO R7
	STXD
	GHI R14
	STXD
	GLO R14
	STXD
	GHI R7
	STXD
	GLO R7
	STXD
	SEX R1
	LDI MUL_32x32_SIGNED>>8
	PHI R6
	LDI MUL_32x32_SIGNED&255
	PLO R6
	SEP R6
	LDI MRES2>>8
	PHI R10
	LDI MRES2&255
	PLO R10
	LDI DIN00>>8
	PHI R11
	LDI DIN00&255
	PLO R11
	LDI 0
	STR R11
	INC R11
	STR R11
	INC R11
	LDA R10
	STR R11
	INC R11
	LDA R10
	STR R11
	INC R11
	LDA R10
	STR R11
	INC R11
	LDA R10
	STR R11
	INC R11
	; 2[x_n + a_n]
	LDI SQRT_RESULT0&255
	PLO R10
	LDI SQRT_RESULT0>>8
	PHI R10
	LDI MIN00&255
	PLO R11
	LDI MIN00>>8
	PHI R11
	LDA R10
	SHL
	STR R11
	INC R11
	LDA R10
	SHLC
	STR R11
	INC R11
	LDA R10
	SHLC
	STR R11
	INC R11
	LDA R10
	SHLC
	STR R11
	INC R11
	; t_n = [a_n²]/[2(x_n + a_n)]
	LDI DIV_48x32_SIGNED>>8
	PHI R6
	LDI DIV_48x32_SIGNED&255
	PLO R6
	SEP R6
	; -t_n
	LDI MRES0&255
	PLO R10
	LDI MRES0>>8
	PHI R10
	LDA R10
	XRI 255
	ADI 1
	PLO R11
	LDA R10
	XRI 255
	ADCI 0
	PHI R11
	LDA R10
	XRI 255
	ADCI 0
	PLO R12
	LDN R10
	XRI 255
	ADCI 0
	PHI R12
	; x_(n+1) = [x_n + a_n] + [-t_n]
	LDI SQRT_RESULT0>>8
	PHI R10
	LDI SQRT_RESULT0&255
	PLO R10
	SEX R10
	GLO R11
	ADD
	PLO R9
	IRX
	GHI R11
	ADC
	PHI R9
	IRX
	GLO R12
	ADC
	PLO R4
	IRX
	GHI R12
	ADC
	PHI R4
	SEX R1

	; Loop end
	IRX
	LDX
	SMI 1
	LBNZ SQRT_LOOP

SQRT_LOOP_OVER:
	LDI SQRT_RESULT0>>8
	PHI R10
	LDI SQRT_RESULT0&255
	PLO R10
	GLO R9
	STR R10
	INC R10
	GHI R9
	STR R10
	INC R10
	GLO R4
	STR R10
	INC R10
	GHI R4
	STR R10
	INC R10

	LDI SQRT_CONT_2&255
	PLO R6
	LDI SQRT_CONT_2>>8
	PHI R6
	SEP R6
SQRT_CONT_2:
	IRX
	LDX
	PHI R0
	IRX
	LDX
	PLO R0
	; Pop & Return
	IRX
	LDX
	PHI R9
	IRX
	LDX
	PLO R9
	IRX
	LDX
	PHI R3
	IRX
	LDX
	PLO R3
	SEP R0

TEST_MUL:
	LDI 13
	STR R9
	SEP R2
	LDI 10
	STR R9
	SEP R2
	LDI MIN13>>8
	PHI R3
	LDI MIN13&255
	PLO R3
	LDI 01h
	STR R3
	DEC R3
	LDI 2Bh
	STR R3
	DEC R3
	LDI 0D0h
	STR R3
	DEC R3
	LDI 08h
	STR R3
	DEC R3
	LDI 00h
	STR R3
	DEC R3
	LDI 3Fh
	STR R3
	DEC R3
	LDI 12h
	STR R3
	DEC R3
	LDI 0ABh
	STR R3
	
	LDI MIN10>>8
	PHI R3
	LDI MIN10&255
	PLO R3
	LDI PRINTINT32>>8
	PHI R6
	LDI PRINTINT32&255
	PLO R6
	SEP R6
	LDI IO_UART
	PLO R9
	LDI '*'
	STR R9
	SEP R2
	LDI MIN00>>8
	PHI R3
	LDI MIN00&255
	PLO R3
	SEP R6
	LDI IO_UART
	PLO R9
	LDI '='
	STR R9
	SEP R2
	
	LDI MUL_32x32_UNSIGNED>>8
	PHI R6
	LDI MUL_32x32_UNSIGNED&255
	PLO R6
	SEP R6
	
	LDI MRES0>>8
	PHI R3
	LDI MRES0&255
	PLO R3
	LDI 8
	PLO R4
	LDI PRINTINT64>>8
	PHI R6
	LDI PRINTINT64&255
	PLO R6
	SEP R6
	LDI IO_UART
	PLO R9
	LDI 13
	STR R9
	SEP R2
	LDI 10
	STR R9
	SEP R2
	
	LDI 0
	PLO R5
FIXED_TEST_LOOP:
	LDI FIXED_TEST_NUMS&255
	STXD
	IRX
	GLO R5
	ADD
	PLO R7
	LDI FIXED_TEST_NUMS>>8
	ADCI 0
	PHI R7
	
	GHI R7
	PHI R3
	GLO R7
	PLO R3
	LDI PRINT_FIXED>>8
	PHI R6
	LDI PRINT_FIXED&255
	PLO R6
	SEP R6
	LDI '*'
	STR R9
	SEP R2
	GLO R7
	ADI 4
	PLO R3
	GHI R7
	ADCI 0
	PHI R3
	SEP R6
	LDI '='
	STR R9
	SEP R2
	
	LDI MIN00>>8
	PHI R3
	LDI MIN00&255
	PLO R3
	LDA R7
	STR R3
	INC R3
	LDA R7
	STR R3
	INC R3
	LDA R7
	STR R3
	INC R3
	LDA R7
	STR R3
	INC R3
	LDA R7
	STR R3
	INC R3
	LDA R7
	STR R3
	INC R3
	LDA R7
	STR R3
	INC R3
	LDA R7
	
	STR R3
	LDI MUL_32x32_SIGNED>>8
	PHI R6
	LDI MUL_32x32_SIGNED&255
	PLO R6
	SEP R6
	
	LDI MRES5&255
	PLO R3
	LDI MRES5>>8
	PHI R3
	LDN R3
	DEC R3
	STXD
	LDN R3
	DEC R3
	STXD
	LDN R3
	DEC R3
	STXD
	LDN R3
	STXD
	LDI PRINT_FIXED>>8
	PHI R6
	LDI PRINT_FIXED&255
	PLO R6
	SEP R6
	LDI ' '
	STR R9
	SEP R2
	LDI '('
	STR R9
	SEP R2
	LDI MRES2&255
	PLO R3
	LDI MRES2>>8
	PHI R3
	IRX
	LDX
	STR R3
	INC R3
	IRX
	LDX
	STR R3
	INC R3
	IRX
	LDX
	STR R3
	INC R3
	IRX
	LDX
	STR R3
	LDI 4
	PLO R4
	LDI PRINT_HEX>>8
	PHI R6
	LDI PRINT_HEX&255
	PLO R6
	SEP R6
	LDI IO_UART
	PLO R9
	LDI ')'
	STR R9
	SEP R2
	LDI 13
	STR R9
	SEP R2
	LDI 10
	STR R9
	SEP R2
	
	GLO R5
	ADI 8
	PLO R5
	SMI 32
	LBNZ FIXED_TEST_LOOP
	
	LDI 13
	STR R9
	SEP R2
	LDI 10
	STR R9
	SEP R2
DIVTEST:
	LDI DIN05>>8
	PHI R15
	LDI DIN05&255
	PLO R15
	SEX R15
	LDI 0
	STXD
	STXD
	LDI 01h
	STXD
	LDI 3Ah
	STXD
	LDI 2Ch
	STXD
	LDI 39h
	STXD
	LDI MIN03>>8
	PHI R15
	LDI MIN03&255
	PLO R15
	LDI 0
	STXD
	STXD
	LDI 01h
	STXD
	LDI 69h
	STXD
	SEX R1
	LDI PRINTINT32>>8
	PHI R6
	LDI PRINTINT32&255
	PLO R6
	LDI DIN00>>8
	PHI R3
	LDI DIN00&255
	PLO R3
	SEP R6
	LDI '/'
	STR R9
	SEP R2
	LDI MIN00>>8
	PHI R3
	LDI MIN00&255
	PLO R3
	SEP R6
	LDI '='
	STR R9
	SEP R2
	LDI DIV_48x32_SIGNED>>8
	PHI R6
	LDI DIV_48x32_SIGNED&255
	PLO R6
	SEP R6
	LDI PRINTINT32>>8
	PHI R6
	LDI PRINTINT32&255
	PLO R6
	LDI MRES0>>8
	PHI R3
	LDI MRES0&255
	PLO R3
	SEP R6
	LDI 13
	STR R9
	SEP R2
	LDI 10
	STR R9
	SEP R2

	LDI 0
	PLO R5
FIXED_TEST_LOOP2:
	LDI FIXED_TEST_NUMS&255
	STXD
	IRX
	GLO R5
	ADD
	PLO R7
	LDI FIXED_TEST_NUMS>>8
	ADCI 0
	PHI R7
	
	GHI R7
	PHI R3
	GLO R7
	PLO R3
	LDI PRINT_FIXED>>8
	PHI R6
	LDI PRINT_FIXED&255
	PLO R6
	SEP R6
	LDI '/'
	STR R9
	SEP R2
	GLO R7
	ADI 4
	PLO R3
	GHI R7
	ADCI 0
	PHI R3
	SEP R6
	LDI '='
	STR R9
	SEP R2
	
	LDI DIN00>>8
	PHI R3
	LDI DIN00&255
	PLO R3
	LDI 0
	STR R3
	INC R3
	STR R3
	INC R3
	LDA R7
	STR R3
	INC R3
	LDA R7
	STR R3
	INC R3
	LDA R7
	STR R3
	INC R3
	LDA R7
	STR R3
	LDI MIN00>>8
	PHI R3
	LDI MIN00&255
	PLO R3
	LDA R7
	STR R3
	INC R3
	LDA R7
	STR R3
	INC R3
	LDA R7
	STR R3
	INC R3
	LDA R7
	STR R3

	LDI DIV_48x32_SIGNED>>8
	PHI R6
	LDI DIV_48x32_SIGNED&255
	PLO R6
	SEP R6
	
	LDI MRES3&255
	PLO R3
	LDI MRES3>>8
	PHI R3
	LDN R3
	DEC R3
	STXD
	LDN R3
	DEC R3
	STXD
	LDN R3
	DEC R3
	STXD
	LDN R3
	STXD
	LDI PRINT_FIXED>>8
	PHI R6
	LDI PRINT_FIXED&255
	PLO R6
	SEP R6
	LDI ' '
	STR R9
	SEP R2
	LDI '('
	STR R9
	SEP R2
	LDI MRES2&255
	PLO R3
	LDI MRES2>>8
	PHI R3
	IRX
	LDX
	STR R3
	INC R3
	IRX
	LDX
	STR R3
	INC R3
	IRX
	LDX
	STR R3
	INC R3
	IRX
	LDX
	STR R3
	LDI 4
	PLO R4
	LDI PRINT_HEX>>8
	PHI R6
	LDI PRINT_HEX&255
	PLO R6
	SEP R6
	LDI IO_UART
	PLO R9
	LDI ')'
	STR R9
	SEP R2
	LDI 13
	STR R9
	SEP R2
	LDI 10
	STR R9
	SEP R2
	
	GLO R5
	ADI 8
	PLO R5
	SMI 32
	LBNZ FIXED_TEST_LOOP2

	LDI 13
	STR R9
	SEP R2
	LDI 10
	STR R9
	SEP R2
SQRT_TEST:
	LDI 0
	PLO R5
SQRT_TEST_LOOP:
	LDI FIXED_TEST_NUMS&255
	STXD
	IRX
	GLO R5
	ADD
	PLO R3
	LDI FIXED_TEST_NUMS>>8
	ADCI 0
	PHI R3

	INC R3
	INC R3
	INC R3
	LDN R3
	ANI 128
	LBNZ SQRT_TEST_SKIP
	DEC R3
	DEC R3
	DEC R3

	LDI 's'
	STR R9
	SEP R2
	LDI 'q'
	STR R9
	SEP R2
	LDI 'r'
	STR R9
	SEP R2
	LDI 't'
	STR R9
	SEP R2
	LDI '('
	STR R9
	SEP R2
	LDI PRINT_FIXED>>8
	PHI R6
	LDI PRINT_FIXED&255
	PLO R6
	SEP R6
	LDI ')'
	STR R9
	SEP R2
	LDI '='
	STR R9
	SEP R2

	LDI SQRT>>8
	PHI R6
	LDI SQRT&255
	PLO R6
	SEP R6
	LDI SQRT_RESULT0>>8
	PHI R3
	LDI SQRT_RESULT0&255
	PLO R3
	LDI PRINT_FIXED>>8
	PHI R6
	LDI PRINT_FIXED&255
	PLO R6
	SEP R6
	LDI 13
	STR R9
	SEP R2
	LDI 10
	STR R9
	SEP R2

SQRT_TEST_SKIP:
	GLO R5
	ADI 4
	PLO R5
	SMI 28
	LBNZ SQRT_TEST_LOOP
	
FROM_RAM:
	LDI RAMCODE>>8
	PHI R3
	LDI RAMCODE&255
	PLO R3
	LDI 70h
	PHI R4
	LDI 00h
	PLO R4
FROM_RAM_SETUP_LOOP:
	LDA R3
	STR R4
	INC R4
	GLO R3
	XRI BEGIN_DATA&255
	BNZ FROM_RAM_SETUP_LOOP
	GHI R3
	XRI BEGIN_DATA>>8
	BNZ FROM_RAM_SETUP_LOOP
	
	LDI 70h
	PHI R4
	LDI 00h
	PLO R4
	SEP R4
	
	LBR END

	align 256
RAMCODE:
	LDI 70h ; +0h
	PHI R3 ; +2h
	LDI 14h ; +3h
	PLO R3 ; +5h
	LDI IO_UART ; +6h
	PLO R9 ; +8h
	LDA R3 ; +9h
	LBZ 7013h ; +Ah
	STR R9 ; +Dh
weh5:
	B4 weh5 ; +Eh
	LBR 7009h ; +10h
	; +13h
	SEP R0
	; +14h
	db 10
	db 13
	db 'Hi from RAM!'
	db 13
	db 10
	db 13
	db 10
	db 0
BEGIN_DATA:
	db 0
	; End of code, begin data
HELLO_TEXT:
	db 10
	db 13
	db 'Hello from CI2406!'
	db 13
	db 10
	db 0
HEX_DIGITS:
	db '0123456789ABCDEF'
PRINTINT32_DIVS:
	; -1000000000
	db 00h, 36h, 65h, 0C4h
	; -100000000
	db 00h, 1Fh, 0Ah, 0FAh
	; -10000000
	db 80h, 69h, 67h, 0FFh
	; -1000000
	db 0C0h, 0BDh, 0F0h, 0FFh
	; -100000
	db 60h, 79h, 0FEh, 0FFh
	; -10000
	db 0F0h, 0D8h, 0FFh, 0FFh
	; -1000
	db 18h, 0FCh, 0FFh, 0FFh
	; -100
	db 9Ch, 0FFh, 0FFh, 0FFh
	; -10
	db 0F6h, 0FFh, 0FFh, 0FFh
	; -1
	db 0FFh, 0FFh, 0FFh, 0FFh
PRINTINT64_DIVS:
	; -1000000000000000000
	db 00h, 00h, 9Ch, 58h, 4Ch, 49h, 1Fh, 0F2h
	; -100000000000000000
	db 00h, 00h, 76h, 0A2h, 87h, 0BAh, 9Ch, 0FEh
	; -10000000000000000
	db 00h, 00h, 3Fh, 90h, 0Dh, 79h, 0DCh, 0FFh
	; -1000000000000000
	db 00h, 80h, 39h, 5Bh, 81h, 72h, 0FCh, 0FFh
	; -100000000000000
	db 00h, 0C0h, 85h, 0EFh, 0Ch, 0A5h, 0FFh, 0FFh
	; -10000000000000
	db 00h, 60h, 8Dh, 0B1h, 0E7h, 0F6h, 0FFh, 0FFh
	; -1000000000000
	db 00h, 0F0h, 5Ah, 2Bh, 17h, 0FFh, 0FFh, 0FFh
	; -100000000000
	db 00h, 18h, 89h, 0B7h, 0E8h, 0FFh, 0FFh, 0FFh
	; -10000000000
	db 00h, 1Ch, 0F4h, 0ABh, 0FDh, 0FFh, 0FFh, 0FFh
	; -1000000000
	db 00h, 36h, 65h, 0C4h, 0FFh, 0FFh, 0FFh, 0FFh
	; -100000000
	db 00h, 1Fh, 0Ah, 0FAh, 0FFh, 0FFh, 0FFh, 0FFh
	; -10000000
	db 80h, 69h, 67h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh
	; -1000000
	db 0C0h, 0BDh, 0F0h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh
	; -100000
	db 60h, 79h, 0FEh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh
	; -10000
	db 0F0h, 0D8h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh
	; -1000
	db 18h, 0FCh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh
	; -100
	db 9Ch, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh
	; -10
	db 0F6h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh
	; -1
	db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh
FIXED_TEST_NUMS:
	db 008h, 0D0h, 02Bh, 001h, 0ADh, 039h, 000h, 000h
	db 012h, 08Dh, 095h, 0FAh, 0FFh, 063h, 010h, 000h
	db 03Fh, 024h, 003h, 000h, 000h, 000h, 002h, 000h
	db 0ADh, 0DFh, 002h, 000h, 0ADh, 0DFh, 002h, 000h
